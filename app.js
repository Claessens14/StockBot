/*-----------------------------------------------------------------------------
A simple echo bot for the Microsoft Bot Framework. 
-----------------------------------------------------------------------------*/

var restify = require('restify');
var builder = require('botbuilder');
var botbuilder_azure = require("botbuilder-azure");
var Conversation = require('watson-developer-cloud/conversation/v1'); // watson sdk
require('dotenv').config();

var search = require('./search');
var output = require('./output');

//declare global vars
var workspace=process.env.WATSON_WORKSPACE_ID;
var userHolder = {};   //hold the json object about the user..generated by watson after first call

// Setup Restify Server
var server = restify.createServer();
server.listen(process.env.port || process.env.PORT || 3978, function () {
   console.log('%s listening to %s', server.name, server.url); 
});
  
// Create the service wrapper
var conversation = new Conversation({
   username: process.env.WATSON_USERNAME,
   password: process.env.WATSON_PASSWORD,
   url: 'https://gateway.watsonplatform.net/conversation/api',  //idk what this is for
   version_date: Conversation.VERSION_DATE_2017_04_21
});

// Create chat connector for communicating with the Bot Framework Service
var connector = new builder.ChatConnector({
    appId: process.env.MicrosoftAppId,
    appPassword: process.env.MicrosoftAppPassword,
    openIdMetadata: process.env.BotOpenIdMetadata
});

// Listen for messages from users 
server.post('/api/messages', connector.listen());

/*----------------------------------------------------------------------------------------
* Bot Storage: This is a great spot to register the private state storage for your bot. 
* We provide adapters for Azure Table, CosmosDb, SQL Azure, or you can implement your own!
* For samples and documentation, see: https://github.com/Microsoft/BotBuilder-Azure
* ---------------------------------------------------------------------------------------- */

// var tableName = 'botdata';
// var azureTableClient = new botbuilder_azure.AzureTableClient(tableName, process.env['AzureWebJobsStorage']);
// var tableStorage = new botbuilder_azure.AzureBotStorage({ gzipData: false }, azureTableClient);

// Create your bot with a function to receive messages from the user
var bot = new builder.UniversalBot(connector, function (session) {

  //console.log("ID client "+ session.message.address.conversation.id);
  //console.log(JSON.stringify(session.message, null, 2));

   var payload = {
      workspace_id: workspace,
      context: userHolder,    //should be no context value when program starts
      input: { text: session.message.text}
   };

   console.log('________________________________\nPRE CONVO PAYLOAD : \n' + JSON.stringify(payload, null, 2) + '\n________________________________\n');

   conversation.message(payload, function(err, watsonData) {
      console.log(JSON.stringify(watsonData));
      if (err) {
         session.send(err);
      } else {
         //console.log(JSON.stringify(response, null, 2));  //console log the JSON array
      if (watsonData.output.text != "") {
         session.send(watsonData.output.text);
      }

      if (watsonData.output.hasOwnProperty('action')) {
        if(watsonData.output.action == "findStock") {
          search.getPrice(watsonData.entities[0].entity, (err, res) => {
            if(err) {
              session.send("the search was unsuccessful");
              console.log(err);
            } else {
              session.send("The price of " + res);
            }
          });
        }
      }

      output.makeChart(session, "AAPL", (err, res) => {
        session.send(res);
      }); 







         userHolder = {};
         userHolder = watsonData.context;

         console.log('________________________________\nPOST CONVO CONTEXT : ' + JSON.stringify(userHolder, null, 2) + '\n________________________________\n');
      }
   });

});
//bot.set('storage', tableStorage);

// bot.dialog('/', function (session) {
//     console.log("HERE?");
//     session.send('YOU TOLD ME ' + session.message.text);
// });